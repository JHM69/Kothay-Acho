package com.selim_jnu.kothayacho.fragment;import android.annotation.SuppressLint;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import com.directions.route.AbstractRouting;import com.directions.route.RouteException;import com.directions.route.Routing;import com.directions.route.RoutingListener;import com.google.android.gms.maps.CameraUpdate;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.BitmapDescriptor;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.CameraPosition;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.Polyline;import com.google.android.gms.maps.model.PolylineOptions;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.selim_jnu.kothayacho.Address;import com.selim_jnu.kothayacho.BuildConfig;import com.selim_jnu.kothayacho.R;import com.selim_jnu.kothayacho.User;import java.util.ArrayList;import java.util.List;import java.util.Objects;public class TrackFragment extends Fragment implements RoutingListener, OnMapReadyCallback {    GoogleMap map;    List<Address> addresses;    List<LatLng> allAddresss = new ArrayList<>();    String userId;    Marker busLocation;    //  MarkerOptions options;    private List<Polyline> polyLines = new ArrayList<>();        public TrackFragment(List<Address> addresses, String userId) {        this.addresses = addresses;        this.userId = userId;    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater,                             @Nullable ViewGroup container,                             @Nullable Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_track, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        for (Address s : addresses) {            allAddresss.add(new LatLng(s.getLat(), s.getLon()));        }        // options = new MarkerOptions();        // options.icon(bitmapDescriptorFromVector(getContext(), R.drawable.ic_icon, R.color.color_theme_2));        SupportMapFragment mapFragment =                (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);        if (mapFragment != null) {            mapFragment.getMapAsync(this);        }        try {            Routing routing = new Routing.Builder()                    .travelMode(Routing.TravelMode.DRIVING)                    .withListener(this)                    .waypoints(allAddresss)                    .key("YOUR_API_KEY")                    .build();            routing.execute();        } catch (Exception d) {            Toast.makeText(getContext(), "Null", Toast.LENGTH_SHORT).show();        }    }    @Override    public void onRoutingFailure(RouteException e) {        Log.d("onRoutingFailure", "onRoutingFailure: " + e.getMessage());    }    @Override    public void onRoutingStart() {    }    @Override    public void onRoutingSuccess(ArrayList<com.directions.route.Route> route, int shortestRouteIndex) {        CameraUpdate center = CameraUpdateFactory.newLatLng(allAddresss.get(0));        CameraUpdate zoom = CameraUpdateFactory.zoomTo(12);        map.moveCamera(center);        map.moveCamera(zoom);        if (polyLines.size() > 0) {            for (Polyline poly : polyLines) {                poly.remove();            }        }        polyLines = new ArrayList<>();        //add route(s) to the map.        try {            for (int i = 0; i < route.size(); i++) {                //In case of more than 5 alternative routes                PolylineOptions polyOptions = new PolylineOptions();                polyOptions.color(getResources().getColor(R.color.colorAccent));                polyOptions.width(9 + i * 3);                polyOptions.addAll(route.get(i).getPoints());                Polyline polyline = map.addPolyline(polyOptions);                polyLines.add(polyline);            }        } catch (Exception ignored) {        }        for (int i = 0; i < addresses.size(); i++) {            if (i == 0) {                Address l = addresses.get(i);                MarkerOptions options = new MarkerOptions();                options.position(new LatLng(l.getLat(), l.getLon()));                options.title(l.getAddress());                options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));                map.addMarker(options);            } else if (i == addresses.size() - 1) {//                Address l = addresses.get(i);//                MarkerOptions options = new MarkerOptions();//                options.position(new LatLng(l.getLat(), l.getLon()));//                options.title(l.getAddress());//                options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA));//                map.addMarker(options);            } else {                Address l = addresses.get(i);                MarkerOptions options = new MarkerOptions();                options.position(new LatLng(l.getLat(), l.getLon()));                options.title(l.getAddress());                options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_VIOLET));                map.addMarker(options);            }        }    }    @SuppressLint("ResourceType")    private BitmapDescriptor bitmapDescriptorFromVector(Context context) {        Drawable background = ContextCompat.getDrawable(context, R.drawable.officer_location);        Bitmap bitmap = Bitmap.createBitmap(Objects.requireNonNull(background).getIntrinsicWidth(), background.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);        return BitmapDescriptorFactory.fromBitmap(bitmap);    }    @Override    public void onRoutingCancelled() {    }    @Override    public void onMapReady(@NonNull GoogleMap googleMap) {        map = googleMap;        map.setTrafficEnabled(false);        map.setBuildingsEnabled(false);        DatabaseReference tripDb = FirebaseDatabase.getInstance().getReference().child("Users").child(userId);        tripDb.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                User user = snapshot.getValue(User.class);                LatLng current = new LatLng(Objects.requireNonNull(user).getLat(), user.getLon());                updateCamera(current, busLocation);            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }    private void updateCamera(LatLng currentLatLng, Marker marker) {        MarkerOptions options = new MarkerOptions();        if (marker == null) {            options.position(currentLatLng);            options.icon(bitmapDescriptorFromVector(getActivity(), R.drawable.ic_location_small));            options.flat(true);            options.anchor(0.5f, 0.5f);            map.addMarker(options);        } else {            marker.setPosition(currentLatLng);        }        CameraPosition cameraPosition = new CameraPosition.Builder(map.getCameraPosition())                .target(currentLatLng).zoom(8).build();        map.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));    }    private BitmapDescriptor bitmapDescriptorFromVector(Context context, int vectorResId) {        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);        Objects.requireNonNull(vectorDrawable).setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);        Canvas canvas = new Canvas(bitmap);        vectorDrawable.draw(canvas);        return BitmapDescriptorFactory.fromBitmap(bitmap);    }}